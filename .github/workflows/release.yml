name: Create Release and Sign Script

# 觸發條件：當推送一個符合 'v*.*.*' 格式的標籤時執行
# 例如：v1.0.0, v2.3.4-beta, v10.20.30
on:
  push:
    tags:
      - 'v*.*.*'

# 環境變數，方便修改檔案名稱
env:
  SCRIPT_FILENAME: media_processor.sh # <<< 確認這個是你腳本的實際檔名
  VERSION_FILENAME: latest_version.txt # <<< 確認這個是你版本檔案的實際檔名

jobs:
  build-release:
    name: Build, Sign, and Release
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 執行環境

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 拉取觸發標籤對應的程式碼

      - name: Get version from tag
        id: get_version
        # 從觸發的標籤名稱 (例如 refs/tags/v1.7.0) 中提取版本號 (v1.7.0)
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Setup GPG
        # 安裝 GnuPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

      - name: Import GPG key
        # 從 GitHub Secrets 中讀取私鑰內容和密碼
        # 使用 --batch 避免互動，--import 匯入私鑰
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          echo "GPG Key Imported."
        # 注意：檢查匯入是否成功是個好主意，但為簡潔起見此處省略

      - name: Generate SHA256 Checksum
        # 為腳本檔案產生 sha256 校驗和檔案
        run: sha256sum $SCRIPT_FILENAME > $SCRIPT_FILENAME.sha256

      - name: Sign the script with GPG
        # 使用匯入的 GPG 私鑰為腳本檔案產生分離式簽章檔 (.sig)
        # --batch --yes: 非互動模式
        # --detach-sign: 產生分離式簽章 (而非嵌入式)
        # --armor: 產生 ASCII 格式的簽章檔
        # -u: 指定使用哪個 Key ID 或 Email 來簽章 (來自 Secrets)
        # --pinentry-mode loopback --passphrase: 在非互動模式下提供密碼 (來自 Secrets)
        run: |
          gpg --batch --yes --detach-sign --armor \
              -u "${{ secrets.GPG_SIGNING_KEY_ID }}" \
              --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              $SCRIPT_FILENAME
          # 將預設的 .asc 副檔名改為 .sig
          mv $SCRIPT_FILENAME.asc $SCRIPT_FILENAME.sig
          echo "Signature file created: $SCRIPT_FILENAME.sig"

      - name: Update version file
        # 將觸發的標籤名稱寫入 latest_version.txt
        run: echo "${{ env.TAG_NAME }}" > $VERSION_FILENAME

      - name: Create GitHub Release
        # 使用 softprops/action-gh-release 這個 Action 來建立 Release
        # 它會自動使用觸發的標籤名稱作為 Release 的名稱和標籤
        uses: softprops/action-gh-release@v2 # 使用 v2 版本
        with:
          # 指定要上傳到 Release 的檔案列表
          files: |
            ${{ env.SCRIPT_FILENAME }}
            ${{ env.SCRIPT_FILENAME }}.sha256
            ${{ env.SCRIPT_FILENAME }}.sig
            ${{ env.VERSION_FILENAME }}
        env:
          # 提供 GitHub Token 以便 Action 可以代表你操作儲存庫 (建立 Release)
          # ${{ secrets.GITHUB_TOKEN }} 是由 GitHub Actions 自動提供的，具有適當權限
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
