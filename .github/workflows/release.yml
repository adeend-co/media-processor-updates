name: Create and Sign Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign the Script Template
        id: sign_script
        run: |
          # ================================================================= #
          # ★★★ 核心修正 ★★★
          # 被簽署的對象是原始的、未經任何修改的 media_processor.sh 模板檔案。
          # 這個模板檔案中的版本號、日期、公鑰、簽章都是佔位符。
          # 這樣就確保了本地驗證時，只要將這四行排除，就能還原出完全一樣的模板內容。
          # ================================================================= #
          
          # 直接對原始模板進行簽署
          gpg --detach-sign --armor -u ${{ secrets.GPG_SIGNING_KEY_ID }} media_processor.sh
          
          # 將簽章內容編碼並傳遞給下一步
          SIGNATURE_B64=$(cat media_processor.sh.asc | base64 -w 0)
          echo "SIGNATURE_B64_VALUE=${SIGNATURE_B64}" >> $GITHUB_OUTPUT

      - name: Prepare Final Release Script
        id: prepare_script
        run: |
          # 1. 建立一個副本用於發布
          cp media_processor.sh release_script.sh
          
          # 2. 提取公鑰
          PUBLIC_KEY_B64=$(gpg --armor --export ${{ secrets.GPG_SIGNING_KEY_ID }} | base64 -w 0)

          # 3. 將所有動態內容注入到發布腳本中
          sed -i "s/^SCRIPT_VERSION=\".*\"/SCRIPT_VERSION=\"${{ github.ref_name }}\"/" release_script.sh
          sed -i "s/^SCRIPT_UPDATE_DATE=\".*\"/SCRIPT_UPDATE_DATE=\"$(date +%Y-%m-%d)\"/" release_script.sh
          sed -i "s@PUBLIC_KEY_PLACEHOLDER@${PUBLIC_KEY_B64}@" release_script.sh
          sed -i "s@SIGNATURE_PLACEHOLDER@${{ steps.sign_script.outputs.SIGNATURE_B64_VALUE }}@" release_script.sh
          
          # 4. 將最終檔案的路徑傳遞出去
          echo "script_path=release_script.sh" >> $GITHUB_OUTPUT

      - name: Create Release Package
        run: |
          # 將最終處理好的腳本重命名回標準名稱，以便打包
          mv ${{ steps.prepare_script.outputs.script_path }} media_processor.sh
          
          # 打包所有需要的檔案
          zip release.zip media_processor.sh estimate_size.py sync_helper.py LICENSE.md README.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release.zip
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            自動化發布版本 ${{ github.ref_name }}。
            
            此版本包含 GPG 數位簽章，可透過腳本內建的「腳本完整性驗證」功能進行驗證。
          prerelease: false
